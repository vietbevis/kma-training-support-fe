import LoadingSpinner from '@/shared/components/LoadingSpinner'
import { decodeToken } from '@/shared/lib/jwt'
import ROUTES from '@/shared/lib/routes'
import { useEffect, useState } from 'react'
import { Navigate, Outlet, useLocation } from 'react-router'
import { useRefreshTokenMutation } from '../api/AuthService'
import useAuthStore from '../stores/authStore'

let countRefreshingToken = 0

const AuthGuard = () => {
  const [isLoading, setIsLoading] = useState(true)
  const { token, logout, isAuth: isAuthenticated } = useAuthStore()
  const location = useLocation()
  const { mutateAsync: refreshTokenMutation, isPending: isRefreshingToken } = useRefreshTokenMutation()

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const accessToken = token?.accessToken
        const refreshToken = token?.refreshToken

        // KhÃ´ng cÃ³ access token - nhÃ¢n viÃªn chÆ°a Ä‘Äƒng nháº­p
        if (!accessToken) {
          logout()
          setIsLoading(false)
          return
        }

        // Giáº£i mÃ£ access token
        const decodedAccess = decodeToken(accessToken)
        if (!decodedAccess) {
          logout()
          setIsLoading(false)
          return
        }

        // Kiá»ƒm tra xem access token cÃ³ há»£p lá»‡ khÃ´ng
        const isAccessTokenExpired = decodedAccess.exp * 1000 < Date.now()

        if (!isAccessTokenExpired) {
          // Access token váº«n há»£p lá»‡
          setIsLoading(false)
          return
        }

        // Access token háº¿t háº¡n, thá»­ lÃ m má»›i
        if (!refreshToken) {
          logout()
          setIsLoading(false)
          return
        }

        // Kiá»ƒm tra tÃ­nh há»£p lá»‡ cá»§a refresh token
        const decodedRefresh = decodeToken(refreshToken)
        if (!decodedRefresh || decodedRefresh.exp * 1000 < Date.now()) {
          logout()
          setIsLoading(false)
          return
        }

        // Thá»­ lÃ m má»›i token
        try {
          if (isRefreshingToken) return
          await refreshTokenMutation({ refreshToken })

          console.log('ðŸš€ ~ checkAuth ~ countRefreshingToken:', countRefreshingToken)
          countRefreshingToken++

          setIsLoading(false)
        } catch {
          logout()
          setIsLoading(false)
        }
      } catch {
        logout()
        setIsLoading(false)
      }
    }

    checkAuth()
  }, [logout, refreshTokenMutation, token?.accessToken, token?.refreshToken, isRefreshingToken])

  // Hiá»ƒn thá»‹ spinner khi kiá»ƒm tra xem nhÃ¢n viÃªn cÃ³ Ä‘Äƒng nháº­p khÃ´ng
  if (isLoading) {
    return <LoadingSpinner isLoading={isLoading} />
  }

  // Chuyá»ƒn hÆ°á»›ng Ä‘áº¿n trang Ä‘Äƒng nháº­p náº¿u nhÃ¢n viÃªn chÆ°a Ä‘Äƒng nháº­p
  if (!isAuthenticated) {
    return <Navigate to={ROUTES.LOGIN.url} state={{ from: location.pathname }} replace />
  }

  // nhÃ¢n viÃªn Ä‘Ã£ Ä‘Äƒng nháº­p, hiá»ƒn thá»‹ children
  return <Outlet />
}

export default AuthGuard
